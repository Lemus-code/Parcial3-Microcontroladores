
Lavadora_P3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000324  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e4  080003ec  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e4  080003e4  000013ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003e4  080003e4  000013ec  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003e4  080003ec  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e4  080003e4  000013e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003e8  080003e8  000013e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003ec  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003ec  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000373  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000010a  00000000  00000000  00001787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00001898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004d  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b64a  00000000  00000000  00001955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000078d  00000000  00000000  0000cf9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003dccb  00000000  00000000  0000d72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0004b3f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e4  00000000  00000000  0004b43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0004b520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080003cc 	.word	0x080003cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080003cc 	.word	0x080003cc

08000108 <initwasher>:
    }
}


void initwasher(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
    // 1) Habilitar reloj base (HSI16)
    RCC->CR |= (1 << 0);
 800010c:	4b7a      	ldr	r3, [pc, #488]	@ (80002f8 <initwasher+0x1f0>)
 800010e:	681a      	ldr	r2, [r3, #0]
 8000110:	4b79      	ldr	r3, [pc, #484]	@ (80002f8 <initwasher+0x1f0>)
 8000112:	2101      	movs	r1, #1
 8000114:	430a      	orrs	r2, r1
 8000116:	601a      	str	r2, [r3, #0]
    while(!(RCC->CR & (1 << 2))); // Esperar a que esté listo
 8000118:	46c0      	nop			@ (mov r8, r8)
 800011a:	4b77      	ldr	r3, [pc, #476]	@ (80002f8 <initwasher+0x1f0>)
 800011c:	681b      	ldr	r3, [r3, #0]
 800011e:	2204      	movs	r2, #4
 8000120:	4013      	ands	r3, r2
 8000122:	d0fa      	beq.n	800011a <initwasher+0x12>
    RCC->CFGR &= ~(0x3);          // HSI16 como SYSCLK
 8000124:	4b74      	ldr	r3, [pc, #464]	@ (80002f8 <initwasher+0x1f0>)
 8000126:	68da      	ldr	r2, [r3, #12]
 8000128:	4b73      	ldr	r3, [pc, #460]	@ (80002f8 <initwasher+0x1f0>)
 800012a:	2103      	movs	r1, #3
 800012c:	438a      	bics	r2, r1
 800012e:	60da      	str	r2, [r3, #12]
    RCC->CFGR |=  (0x1 << 0);
 8000130:	4b71      	ldr	r3, [pc, #452]	@ (80002f8 <initwasher+0x1f0>)
 8000132:	68da      	ldr	r2, [r3, #12]
 8000134:	4b70      	ldr	r3, [pc, #448]	@ (80002f8 <initwasher+0x1f0>)
 8000136:	2101      	movs	r1, #1
 8000138:	430a      	orrs	r2, r1
 800013a:	60da      	str	r2, [r3, #12]

    // 2) Clocks GPIO
    RCC->IOPENR |= (1 << 0) | (1 << 1) | (1 << 2); // GPIOA, GPIOB, GPIOC
 800013c:	4b6e      	ldr	r3, [pc, #440]	@ (80002f8 <initwasher+0x1f0>)
 800013e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000140:	4b6d      	ldr	r3, [pc, #436]	@ (80002f8 <initwasher+0x1f0>)
 8000142:	2107      	movs	r1, #7
 8000144:	430a      	orrs	r2, r1
 8000146:	62da      	str	r2, [r3, #44]	@ 0x2c
    RCC->APB2ENR |= (1u<<0);                   // SYSCFG
 8000148:	4b6b      	ldr	r3, [pc, #428]	@ (80002f8 <initwasher+0x1f0>)
 800014a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800014c:	4b6a      	ldr	r3, [pc, #424]	@ (80002f8 <initwasher+0x1f0>)
 800014e:	2101      	movs	r1, #1
 8000150:	430a      	orrs	r2, r1
 8000152:	635a      	str	r2, [r3, #52]	@ 0x34

    // 3) Config GPIO's

    // LCD: PA4 (RS), PA5 (E), PA8–PA11 (D4–D7)
    GPIOA->MODER &= ~((3<<(4*2))|(3<<(5*2))|(3<<(8*2))|(3<<(9*2))|(3<<(10*2))|(3<<(11*2)));
 8000154:	23a0      	movs	r3, #160	@ 0xa0
 8000156:	05db      	lsls	r3, r3, #23
 8000158:	681a      	ldr	r2, [r3, #0]
 800015a:	23a0      	movs	r3, #160	@ 0xa0
 800015c:	05db      	lsls	r3, r3, #23
 800015e:	4967      	ldr	r1, [pc, #412]	@ (80002fc <initwasher+0x1f4>)
 8000160:	400a      	ands	r2, r1
 8000162:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |=  ((1<<(4*2))|(1<<(5*2))|(1<<(8*2))|(1<<(9*2))|(1<<(10*2))|(1<<(11*2)));
 8000164:	23a0      	movs	r3, #160	@ 0xa0
 8000166:	05db      	lsls	r3, r3, #23
 8000168:	681a      	ldr	r2, [r3, #0]
 800016a:	23a0      	movs	r3, #160	@ 0xa0
 800016c:	05db      	lsls	r3, r3, #23
 800016e:	4964      	ldr	r1, [pc, #400]	@ (8000300 <initwasher+0x1f8>)
 8000170:	430a      	orrs	r2, r1
 8000172:	601a      	str	r2, [r3, #0]

    // Buzzer PWM: PA0 (AF5 → TIM2_CH1)
    GPIOA->MODER &= ~(3<<(0*2));
 8000174:	23a0      	movs	r3, #160	@ 0xa0
 8000176:	05db      	lsls	r3, r3, #23
 8000178:	681a      	ldr	r2, [r3, #0]
 800017a:	23a0      	movs	r3, #160	@ 0xa0
 800017c:	05db      	lsls	r3, r3, #23
 800017e:	2103      	movs	r1, #3
 8000180:	438a      	bics	r2, r1
 8000182:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |=  (2<<(0*2));       // Alternate Function
 8000184:	23a0      	movs	r3, #160	@ 0xa0
 8000186:	05db      	lsls	r3, r3, #23
 8000188:	681a      	ldr	r2, [r3, #0]
 800018a:	23a0      	movs	r3, #160	@ 0xa0
 800018c:	05db      	lsls	r3, r3, #23
 800018e:	2102      	movs	r1, #2
 8000190:	430a      	orrs	r2, r1
 8000192:	601a      	str	r2, [r3, #0]
    GPIOA->AFR[0]  |=  (5<<(0*4));     // AF5
 8000194:	23a0      	movs	r3, #160	@ 0xa0
 8000196:	05db      	lsls	r3, r3, #23
 8000198:	6a1a      	ldr	r2, [r3, #32]
 800019a:	23a0      	movs	r3, #160	@ 0xa0
 800019c:	05db      	lsls	r3, r3, #23
 800019e:	2105      	movs	r1, #5
 80001a0:	430a      	orrs	r2, r1
 80001a2:	621a      	str	r2, [r3, #32]

    // USART2 TX/RX: PA2 (TX), PA3 (RX) → AF4
    GPIOA->MODER &= ~((3<<(2*2))|(3<<(3*2)));
 80001a4:	23a0      	movs	r3, #160	@ 0xa0
 80001a6:	05db      	lsls	r3, r3, #23
 80001a8:	681a      	ldr	r2, [r3, #0]
 80001aa:	23a0      	movs	r3, #160	@ 0xa0
 80001ac:	05db      	lsls	r3, r3, #23
 80001ae:	21f0      	movs	r1, #240	@ 0xf0
 80001b0:	438a      	bics	r2, r1
 80001b2:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |=  ((2<<(2*2))|(2<<(3*2)));
 80001b4:	23a0      	movs	r3, #160	@ 0xa0
 80001b6:	05db      	lsls	r3, r3, #23
 80001b8:	681a      	ldr	r2, [r3, #0]
 80001ba:	23a0      	movs	r3, #160	@ 0xa0
 80001bc:	05db      	lsls	r3, r3, #23
 80001be:	21a0      	movs	r1, #160	@ 0xa0
 80001c0:	430a      	orrs	r2, r1
 80001c2:	601a      	str	r2, [r3, #0]
    GPIOA->AFR[0]  |=  ((4<<(2*4))|(4<<(3*4)));
 80001c4:	23a0      	movs	r3, #160	@ 0xa0
 80001c6:	05db      	lsls	r3, r3, #23
 80001c8:	6a1a      	ldr	r2, [r3, #32]
 80001ca:	23a0      	movs	r3, #160	@ 0xa0
 80001cc:	05db      	lsls	r3, r3, #23
 80001ce:	2188      	movs	r1, #136	@ 0x88
 80001d0:	01c9      	lsls	r1, r1, #7
 80001d2:	430a      	orrs	r2, r1
 80001d4:	621a      	str	r2, [r3, #32]


    //GPIOB

    // Keypad fila (PB0) → entrada con pull-up interno
    GPIOB->MODER &= ~(3<<(0*2));
 80001d6:	4b4b      	ldr	r3, [pc, #300]	@ (8000304 <initwasher+0x1fc>)
 80001d8:	681a      	ldr	r2, [r3, #0]
 80001da:	4b4a      	ldr	r3, [pc, #296]	@ (8000304 <initwasher+0x1fc>)
 80001dc:	2103      	movs	r1, #3
 80001de:	438a      	bics	r2, r1
 80001e0:	601a      	str	r2, [r3, #0]
    GPIOB->PUPDR &= ~(3<<(0*2));
 80001e2:	4b48      	ldr	r3, [pc, #288]	@ (8000304 <initwasher+0x1fc>)
 80001e4:	68da      	ldr	r2, [r3, #12]
 80001e6:	4b47      	ldr	r3, [pc, #284]	@ (8000304 <initwasher+0x1fc>)
 80001e8:	2103      	movs	r1, #3
 80001ea:	438a      	bics	r2, r1
 80001ec:	60da      	str	r2, [r3, #12]
    GPIOB->PUPDR |=  (1<<(0*2));
 80001ee:	4b45      	ldr	r3, [pc, #276]	@ (8000304 <initwasher+0x1fc>)
 80001f0:	68da      	ldr	r2, [r3, #12]
 80001f2:	4b44      	ldr	r3, [pc, #272]	@ (8000304 <initwasher+0x1fc>)
 80001f4:	2101      	movs	r1, #1
 80001f6:	430a      	orrs	r2, r1
 80001f8:	60da      	str	r2, [r3, #12]

    // Keypad columnas (PB4–PB6) → salidas controladas por ODR
    GPIOB->MODER &= ~((3<<(4*2))|(3<<(5*2))|(3<<(6*2)));
 80001fa:	4b42      	ldr	r3, [pc, #264]	@ (8000304 <initwasher+0x1fc>)
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	4b41      	ldr	r3, [pc, #260]	@ (8000304 <initwasher+0x1fc>)
 8000200:	4941      	ldr	r1, [pc, #260]	@ (8000308 <initwasher+0x200>)
 8000202:	400a      	ands	r2, r1
 8000204:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |=  ((1<<(4*2))|(1<<(5*2))|(1<<(6*2)));
 8000206:	4b3f      	ldr	r3, [pc, #252]	@ (8000304 <initwasher+0x1fc>)
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	4b3e      	ldr	r3, [pc, #248]	@ (8000304 <initwasher+0x1fc>)
 800020c:	21a8      	movs	r1, #168	@ 0xa8
 800020e:	0149      	lsls	r1, r1, #5
 8000210:	430a      	orrs	r2, r1
 8000212:	601a      	str	r2, [r3, #0]
    GPIOB->ODR   |=  ((1<<4)|(1<<5)|(1<<6)); // arranque HIGH
 8000214:	4b3b      	ldr	r3, [pc, #236]	@ (8000304 <initwasher+0x1fc>)
 8000216:	695a      	ldr	r2, [r3, #20]
 8000218:	4b3a      	ldr	r3, [pc, #232]	@ (8000304 <initwasher+0x1fc>)
 800021a:	2170      	movs	r1, #112	@ 0x70
 800021c:	430a      	orrs	r2, r1
 800021e:	615a      	str	r2, [r3, #20]


    // Motor IN3–IN4 (PB8–PB9) → salidas
    GPIOB->MODER &= ~((3<<(8*2))|(3<<(9*2)));
 8000220:	4b38      	ldr	r3, [pc, #224]	@ (8000304 <initwasher+0x1fc>)
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	4b37      	ldr	r3, [pc, #220]	@ (8000304 <initwasher+0x1fc>)
 8000226:	4939      	ldr	r1, [pc, #228]	@ (800030c <initwasher+0x204>)
 8000228:	400a      	ands	r2, r1
 800022a:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |=  ((1<<(8*2))|(1<<(9*2)));
 800022c:	4b35      	ldr	r3, [pc, #212]	@ (8000304 <initwasher+0x1fc>)
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	4b34      	ldr	r3, [pc, #208]	@ (8000304 <initwasher+0x1fc>)
 8000232:	21a0      	movs	r1, #160	@ 0xa0
 8000234:	02c9      	lsls	r1, r1, #11
 8000236:	430a      	orrs	r2, r1
 8000238:	601a      	str	r2, [r3, #0]

    // Display enable (PB10–PB13) → salidas
    GPIOB->MODER &= ~((3<<(10*2))|(3<<(11*2))|(3<<(12*2))|(3<<(13*2)));
 800023a:	4b32      	ldr	r3, [pc, #200]	@ (8000304 <initwasher+0x1fc>)
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	4b31      	ldr	r3, [pc, #196]	@ (8000304 <initwasher+0x1fc>)
 8000240:	4933      	ldr	r1, [pc, #204]	@ (8000310 <initwasher+0x208>)
 8000242:	400a      	ands	r2, r1
 8000244:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |=  ((1<<(10*2))|(1<<(11*2))|(1<<(12*2))|(1<<(13*2)));
 8000246:	4b2f      	ldr	r3, [pc, #188]	@ (8000304 <initwasher+0x1fc>)
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	4b2e      	ldr	r3, [pc, #184]	@ (8000304 <initwasher+0x1fc>)
 800024c:	21aa      	movs	r1, #170	@ 0xaa
 800024e:	04c9      	lsls	r1, r1, #19
 8000250:	430a      	orrs	r2, r1
 8000252:	601a      	str	r2, [r3, #0]


    //GPIOC

    // Display segmentos (PC0–PC7) → salidas
    GPIOC->MODER &= ~(
 8000254:	4b2f      	ldr	r3, [pc, #188]	@ (8000314 <initwasher+0x20c>)
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	4b2e      	ldr	r3, [pc, #184]	@ (8000314 <initwasher+0x20c>)
 800025a:	0c12      	lsrs	r2, r2, #16
 800025c:	0412      	lsls	r2, r2, #16
 800025e:	601a      	str	r2, [r3, #0]
        (3<<(0*2))|(3<<(1*2))|(3<<(2*2))|(3<<(3*2))|
        (3<<(4*2))|(3<<(5*2))|(3<<(6*2))|(3<<(7*2))
    );
    GPIOC->MODER |= (
 8000260:	4b2c      	ldr	r3, [pc, #176]	@ (8000314 <initwasher+0x20c>)
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	4b2b      	ldr	r3, [pc, #172]	@ (8000314 <initwasher+0x20c>)
 8000266:	492c      	ldr	r1, [pc, #176]	@ (8000318 <initwasher+0x210>)
 8000268:	430a      	orrs	r2, r1
 800026a:	601a      	str	r2, [r3, #0]
        (1<<(0*2))|(1<<(1*2))|(1<<(2*2))|(1<<(3*2))|
        (1<<(4*2))|(1<<(5*2))|(1<<(6*2))|(1<<(7*2))
    );

    // Motor IN1–IN2 (PC8–PC9) → salidas
    GPIOC->MODER &= ~((3<<(8*2))|(3<<(9*2)));
 800026c:	4b29      	ldr	r3, [pc, #164]	@ (8000314 <initwasher+0x20c>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	4b28      	ldr	r3, [pc, #160]	@ (8000314 <initwasher+0x20c>)
 8000272:	4926      	ldr	r1, [pc, #152]	@ (800030c <initwasher+0x204>)
 8000274:	400a      	ands	r2, r1
 8000276:	601a      	str	r2, [r3, #0]
    GPIOC->MODER |=  ((1<<(8*2))|(1<<(9*2)));
 8000278:	4b26      	ldr	r3, [pc, #152]	@ (8000314 <initwasher+0x20c>)
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b25      	ldr	r3, [pc, #148]	@ (8000314 <initwasher+0x20c>)
 800027e:	21a0      	movs	r1, #160	@ 0xa0
 8000280:	02c9      	lsls	r1, r1, #11
 8000282:	430a      	orrs	r2, r1
 8000284:	601a      	str	r2, [r3, #0]

    // LEDs de etapa (PC10–PC12) → salidas
    GPIOC->MODER &= ~((3<<(10*2))|(3<<(11*2))|(3<<(12*2)));
 8000286:	4b23      	ldr	r3, [pc, #140]	@ (8000314 <initwasher+0x20c>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	4b22      	ldr	r3, [pc, #136]	@ (8000314 <initwasher+0x20c>)
 800028c:	4923      	ldr	r1, [pc, #140]	@ (800031c <initwasher+0x214>)
 800028e:	400a      	ands	r2, r1
 8000290:	601a      	str	r2, [r3, #0]
    GPIOC->MODER |=  ((1<<(10*2))|(1<<(11*2))|(1<<(12*2)));
 8000292:	4b20      	ldr	r3, [pc, #128]	@ (8000314 <initwasher+0x20c>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	4b1f      	ldr	r3, [pc, #124]	@ (8000314 <initwasher+0x20c>)
 8000298:	21a8      	movs	r1, #168	@ 0xa8
 800029a:	0449      	lsls	r1, r1, #17
 800029c:	430a      	orrs	r2, r1
 800029e:	601a      	str	r2, [r3, #0]

    // Botones y tapa (PC13,PB1,PB2) → entradas
    GPIOC->MODER &= ~(3<<(13*2));
 80002a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000314 <initwasher+0x20c>)
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000314 <initwasher+0x20c>)
 80002a6:	491e      	ldr	r1, [pc, #120]	@ (8000320 <initwasher+0x218>)
 80002a8:	400a      	ands	r2, r1
 80002aa:	601a      	str	r2, [r3, #0]
    GPIOB->MODER &= ~(3<<(1*2));
 80002ac:	4b15      	ldr	r3, [pc, #84]	@ (8000304 <initwasher+0x1fc>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	4b14      	ldr	r3, [pc, #80]	@ (8000304 <initwasher+0x1fc>)
 80002b2:	210c      	movs	r1, #12
 80002b4:	438a      	bics	r2, r1
 80002b6:	601a      	str	r2, [r3, #0]
    GPIOB->MODER &= ~(3<<(2*2));
 80002b8:	4b12      	ldr	r3, [pc, #72]	@ (8000304 <initwasher+0x1fc>)
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	4b11      	ldr	r3, [pc, #68]	@ (8000304 <initwasher+0x1fc>)
 80002be:	2130      	movs	r1, #48	@ 0x30
 80002c0:	438a      	bics	r2, r1
 80002c2:	601a      	str	r2, [r3, #0]
    GPIOB->PUPDR &= ~(3<<(2*2));
 80002c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <initwasher+0x1fc>)
 80002c6:	68da      	ldr	r2, [r3, #12]
 80002c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000304 <initwasher+0x1fc>)
 80002ca:	2130      	movs	r1, #48	@ 0x30
 80002cc:	438a      	bics	r2, r1
 80002ce:	60da      	str	r2, [r3, #12]
    GPIOB->PUPDR |=  (1<<(2*2));   // pull-up interno
 80002d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <initwasher+0x1fc>)
 80002d2:	68da      	ldr	r2, [r3, #12]
 80002d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000304 <initwasher+0x1fc>)
 80002d6:	2110      	movs	r1, #16
 80002d8:	430a      	orrs	r2, r1
 80002da:	60da      	str	r2, [r3, #12]

    GPIOA->ODR = 0x0000;
 80002dc:	23a0      	movs	r3, #160	@ 0xa0
 80002de:	05db      	lsls	r3, r3, #23
 80002e0:	2200      	movs	r2, #0
 80002e2:	615a      	str	r2, [r3, #20]
    GPIOB->ODR = 0x0000;
 80002e4:	4b07      	ldr	r3, [pc, #28]	@ (8000304 <initwasher+0x1fc>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	615a      	str	r2, [r3, #20]
    GPIOC->ODR = 0x0000;
 80002ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000314 <initwasher+0x20c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	615a      	str	r2, [r3, #20]

    // 4) EXIT (Flanco bajada)
    // Keypad (filas) y Botones (PC13, PB1, PB2)
}
 80002f0:	46c0      	nop			@ (mov r8, r8)
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	46c0      	nop			@ (mov r8, r8)
 80002f8:	40021000 	.word	0x40021000
 80002fc:	ff00f0ff 	.word	0xff00f0ff
 8000300:	00550500 	.word	0x00550500
 8000304:	50000400 	.word	0x50000400
 8000308:	ffffc0ff 	.word	0xffffc0ff
 800030c:	fff0ffff 	.word	0xfff0ffff
 8000310:	f00fffff 	.word	0xf00fffff
 8000314:	50000800 	.word	0x50000800
 8000318:	00005555 	.word	0x00005555
 800031c:	fc0fffff 	.word	0xfc0fffff
 8000320:	f3ffffff 	.word	0xf3ffffff

08000324 <main>:


int main (void){
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	initwasher();
 8000328:	f7ff feee 	bl	8000108 <initwasher>
	while(1){
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	e7fd      	b.n	800032c <main+0x8>

08000330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000330:	480d      	ldr	r0, [pc, #52]	@ (8000368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000332:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000334:	e000      	b.n	8000338 <Reset_Handler+0x8>
 8000336:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000338:	480c      	ldr	r0, [pc, #48]	@ (800036c <LoopForever+0x6>)
  ldr r1, =_edata
 800033a:	490d      	ldr	r1, [pc, #52]	@ (8000370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800033c:	4a0d      	ldr	r2, [pc, #52]	@ (8000374 <LoopForever+0xe>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a0a      	ldr	r2, [pc, #40]	@ (8000378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000350:	4c0a      	ldr	r4, [pc, #40]	@ (800037c <LoopForever+0x16>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800035e:	f000 f811 	bl	8000384 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000362:	f7ff ffdf 	bl	8000324 <main>

08000366 <LoopForever>:

LoopForever:
  b LoopForever
 8000366:	e7fe      	b.n	8000366 <LoopForever>
  ldr   r0, =_estack
 8000368:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000374:	080003ec 	.word	0x080003ec
  ldr r2, =_sbss
 8000378:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800037c:	2000001c 	.word	0x2000001c

08000380 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <ADC_COMP_IRQHandler>
	...

08000384 <__libc_init_array>:
 8000384:	b570      	push	{r4, r5, r6, lr}
 8000386:	2600      	movs	r6, #0
 8000388:	4c0c      	ldr	r4, [pc, #48]	@ (80003bc <__libc_init_array+0x38>)
 800038a:	4d0d      	ldr	r5, [pc, #52]	@ (80003c0 <__libc_init_array+0x3c>)
 800038c:	1b64      	subs	r4, r4, r5
 800038e:	10a4      	asrs	r4, r4, #2
 8000390:	42a6      	cmp	r6, r4
 8000392:	d109      	bne.n	80003a8 <__libc_init_array+0x24>
 8000394:	2600      	movs	r6, #0
 8000396:	f000 f819 	bl	80003cc <_init>
 800039a:	4c0a      	ldr	r4, [pc, #40]	@ (80003c4 <__libc_init_array+0x40>)
 800039c:	4d0a      	ldr	r5, [pc, #40]	@ (80003c8 <__libc_init_array+0x44>)
 800039e:	1b64      	subs	r4, r4, r5
 80003a0:	10a4      	asrs	r4, r4, #2
 80003a2:	42a6      	cmp	r6, r4
 80003a4:	d105      	bne.n	80003b2 <__libc_init_array+0x2e>
 80003a6:	bd70      	pop	{r4, r5, r6, pc}
 80003a8:	00b3      	lsls	r3, r6, #2
 80003aa:	58eb      	ldr	r3, [r5, r3]
 80003ac:	4798      	blx	r3
 80003ae:	3601      	adds	r6, #1
 80003b0:	e7ee      	b.n	8000390 <__libc_init_array+0xc>
 80003b2:	00b3      	lsls	r3, r6, #2
 80003b4:	58eb      	ldr	r3, [r5, r3]
 80003b6:	4798      	blx	r3
 80003b8:	3601      	adds	r6, #1
 80003ba:	e7f2      	b.n	80003a2 <__libc_init_array+0x1e>
 80003bc:	080003e4 	.word	0x080003e4
 80003c0:	080003e4 	.word	0x080003e4
 80003c4:	080003e8 	.word	0x080003e8
 80003c8:	080003e4 	.word	0x080003e4

080003cc <_init>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	46c0      	nop			@ (mov r8, r8)
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr

080003d8 <_fini>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	46c0      	nop			@ (mov r8, r8)
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr
